generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  exercises       Exercise[]
  workoutSessions WorkoutSession[]
  exerciseTypes   ExerciseType[]
  settings        Settings?        @relation()
  settingsId      String           @default("")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Settings {
  id         String  @id @default(cuid())
  user       User    @relation(fields: [userId], references: [id])
  userId     String  @unique
  useTimer   Boolean @default(true)
  timerValue Float   @default(180000)
}

model WorkoutSession {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises Exercise[]
  finished  Boolean    @default(false)
  createdAt DateTime   @default(now())

  @@unique([id])
}

model Exercise {
  id            String         @id @default(cuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  averageWeight Float?
  averageReps   Int?
  typeId        String
  type          ExerciseType   @relation(fields: [typeId], references: [id])
  sessionId     String
  session       WorkoutSession @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sets          ExerciseSet[]
  createdAt     DateTime       @default(now())
}

model ExerciseType {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  exercise    Exercise[]
  users       User[]
}

enum ExerciseSetType {
  WARMUP
  WORKOUT
  COOLDOWN
}

model ExerciseSet {
  id              String          @id @default(cuid())
  exerciseId      String
  exercise        Exercise        @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseSetType ExerciseSetType @default(WORKOUT)
  reps            Int
  weight          Float
  notes           String          @default("")
  createdAt       DateTime        @default(now())
}
